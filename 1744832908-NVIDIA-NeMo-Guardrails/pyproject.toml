[tool.poetry]
name = "nemoguardrails"
description = "NeMo Guardrails is an open-source toolkit for easily adding programmable guardrails to LLM-based conversational systems."
authors = ["NVIDIA <nemoguardrails@nvidia.com>"]
license = "LICENSE.md"
readme = "README.md"
version = "0.13.0"
packages = [{ include = "nemoguardrails" }]


include = [
  "LICENSE.md",
  "LICENSE-Apache-2.0.txt",
  "LICENCES-3rd-party.txt",
  "chat-ui/**/*",
  "examples/**/*",
  "eval/data/**/*",
  "**/*.yml",
  "**/*.co",
  "**/*.txt",
  "**/*.json",
  "**/*.lark",
]

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]

[tool.poetry.urls]
homepage = "https://github.com/NVIDIA/nemo-guardrails"
issues = "https://github.com/NVIDIA/nemo-guardrails/issues"
changelog = "https://github.com/NVIDIA/NeMo-Guardrails/blob/develop/CHANGELOG.md"
documentation = "https://docs.nvidia.com/nemo/guardrails/"
repository = "https://github.com/NVIDIA/NeMo-Guardrails"


[tool.poetry.scripts]
nemoguardrails = "nemoguardrails.__main__:app"

[tool.poetry.dependencies]
python = ">=3.9,!=3.9.7,<3.14"
aiohttp = ">=3.10.11"
annoy = ">=1.17.3"
fastapi = ">=0.103.0,"
fastembed = [
  { version = ">=0.2.2, <0.5", python = ">=3.9,<3.10" },
  { version = ">=0.5.0, <=0.6.0", python = ">=3.10, <3.14" },
]
onnxruntime = [
  { version = ">=1.17.0, <=1.19.2", python = ">=3.9, <3.10" },
  { version = ">=1.20.0", python = ">=3.10, <3.14" },
]

httpx = ">=0.24.1"
# onnxruntime in 1.20 has dropped python 3.9 support
# fastembed has also dropped python 3.9 support entirely as of 0.5.0
# fastembed depends on onnxruntime we pindown the working version for 3.9 here
# as it is a transient dependency we must remove it later
jinja2 = ">=3.1.6"
langchain = ">=0.2.14,<0.4.0"
langchain-core = ">=0.2.14,<0.4.0"
langchain-community = ">=0.2.5,<0.4.0"
lark = ">=1.1.7"
nest-asyncio = ">=1.5.6,"
prompt-toolkit = ">=3.0"
pydantic = ">=1.10"
pyyaml = ">=6.0"
rich = ">=13.5.2"
simpleeval = ">=0.9.13,"
starlette = ">=0.27.0"
typer = ">=0.8"
uvicorn = ">=0.23"
watchdog = ">=3.0.0,"

# tracing
opentelemetry-api = { version = ">=1.27.0,<2.0.0", optional = true }
opentelemetry-sdk = { version = ">=1.27.0,<2.0.0", optional = true }
aiofiles = { version = ">=24.1.0", optional = true }

# openai
langchain-openai = { version = ">=0.0.5", optional = true }

# eval
tqdm = { version = ">=4.65,<5.0", optional = true }
numpy = [
  { version = ">=1.21,<1.24", python = ">=3.9,<3.10" },
  { version = ">=1.24,<2.2.0", python = ">=3.10,<3.14" },
]
streamlit = { version = "^1.37.0", optional = true, python = ">=3.9,!=3.9.7,<3.12" }
pandas = { version = ">=1.4.0,<3", optional = true }

spacy = [
  { version = ">=3.7.2,<3.8.0", optional = true, python = ">=3.9,<3.13" },
  # { version = "==3.7.2", optional = true, python = ">=3.13,<3.14" },
] # Capping spacy to spacy<3.8.0  see https://github.com/explosion/cython-blis/issues/117# poetry 3.8.4 does not exist for python 3.9
# No spacy support for python 3.13 (https://github.com/explosion/spaCy/issues/13658)
presidio-analyzer = { version = ">=2.2", optional = true }   # sdd
presidio-anonymizer = { version = ">=2.2", optional = true }

# nim
langchain-nvidia-ai-endpoints = { version = ">= 0.2.0", optional = true }

# gpc
google-cloud-language = { version = ">=2.14.0", optional = true }

[tool.poetry.extras]
sdd = ["presidio-analyzer", "presidio-anonymizer", "spacy"]
eval = ["tqdm", "numpy", "streamlit"]
openai = ["langchain-openai"]
gcp = ["google-cloud-language"]
tracing = ["opentelemetry-api", "opentelemetry-sdk", "aiofiles"]
nvidia = ["langchain-nvidia-ai-endpoints"]
# Poetry does not support recursive dependencies, so we need to add all the dependencies here.
# I also support their decision. There is no PEP for recursive dependencies, but it has been supported in pip since version 21.2.
# It is here for backward compatibility.
all = [
  "presidio-analyzer",
  "presidio-anonymizer",
  "spacy",
  "tqdm",
  "numpy",
  "streamlit",
  "langchain-openai",
  "google-cloud-language",
  "opentelemetry-api",
  "opentelemetry-sdk",
  "aiofiles",
  "langchain-nvidia-ai-endpoints",
]

[tool.poetry.group.dev]
optional = true


[tool.poetry.group.dev.dependencies]
black = ">=24.3.0"
aioresponses = ">=0.7.6"
mypy = ">=1.1.1"
pre-commit = ">=3.1.1"
pylint = ">=2.17.0"
pytest = ">=7.2.2"
pytest-asyncio = ">=0.21.0"
pytest-cov = ">=4.1.0"
pytest-httpx = ">=0.22.0"
streamlit = ">=1.37.0"
tox = "^4.23.2"
pytest-profiling = "^1.7.0"


[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
toml = "^0.10.2"
sphinx-reredirects = "<0.2"
sphinx = "<=7.5"
myst-parser = "<=5"
sphinx-copybutton = "<=0.6"
nvidia-sphinx-theme = { version = ">=0.0.8", python = ">=3.10" }


[tool.pytest.ini_options]
addopts = "-p no:warnings"
log-level = "DEBUG"

# The flag below should only be activated in special debug sessions
# i.e. the test hangs and we need to see what happened up to that point.
# There are some race conditions with how the logging streams are closed in the teardown
# phase, which will cause tests to fail or "magically" ignored.
log_cli = "False"

[build-system]
requires = ["poetry-core>=1.0.0,<2.0.0"]
build-backend = "poetry.core.masonry.api"
